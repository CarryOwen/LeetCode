#include <iostream>       // std::cout
#include <thread>         // std::thread
#include <mutex>          // std::mutex
#include"iostream"
using namespace std;

/*对齐规则
    1.第一个成员在与结构体变量偏移量为0的地址处。
	2.其他成员变量要对齐到某个数字(对齐数)的整数倍的地址处。
	3.结构体总大小为最大对齐数(每个成员变量都有一个对齐数)的整数倍。
	如果嵌套了结构体的情况，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数(含嵌套结构体的对齐数)的整数倍。
	这里要注意的一点就是要解释一下这个对齐数的概念
	对齐数：编译器默认的一个对齐数 与 该结构体变量成员自身大小的较小值。，例如默认对齐数为8，那么int 类型占4个字节（32位系统），那么该成员变量的对齐数为4
	#pragma pack(4)  指定对齐数为4
*/
#pragma pack(4) // 指定对齐数为4
struct Test{
    int a;  //默认对齐为4的时候，int 大小为4,0为4的整数倍，则int a的位置为[0-3]
    char b; //char 大小为1，小于4，那么，对齐数为1，根据规则2，则应该为[4],4是1的整数倍
    short c; //short 大小为2，小于4，那么对齐数为2，根据规则2，则应该为[6-7],5不是2的整数倍
    char d; //char 大小为1，小于4，那么对齐数为1，根据规则2，则应该为[8]，那么总大小为[0-8]，9个字节，由规则3可知 ，9不是最大对齐数4的倍数，所以往后找4的倍数12.因此大小为12
};

struct Test1{
    double a;  //默认对齐为4的时候，int 大小为8,0为8的整数倍，则int a的位置为[0-7]
    char b; //char 大小为1，小于4，那么，对齐数为1，根据规则2，则应该为[8],4是1的整数倍
    short c; //short 大小为2，小于4，那么对齐数为2，根据规则2，则应该为[10-11],9不是2的整数倍
    char d; //char 大小为1，小于4，那么对齐数为1，根据规则2，则应该为[12]，那么总大小为[0-12]，13个字节，由规则3可知 ，13不是最大对齐数8的倍数，所以往后找4的倍数16.因此大小为16
};
int main()
{
    Test t;
    Test1 t1; //
    cout<<sizeof(t)<<endl;
    cout<<sizeof(t1)<<endl;
    system("pause");
    return 0;
}